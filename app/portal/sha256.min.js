/**
 * Implementación simplificada y optimizada de SHA-256
 * Evita recursión excesiva y problemas de pila
 */
function sha256(input) {
  // Función auxiliar para convertir un número a string hexadecimal
  function toHexString(num) {
    var hex = num.toString(16)
    return hex.length === 1 ? "0" + hex : hex
  }

  // Función para rotar bits a la derecha
  function rightRotate(value, amount) {
    return ((value >>> amount) | (value << (32 - amount))) >>> 0
  }

  // Convertir string a array de bytes UTF-8
  var bytes = []
  for (var i = 0; i < input.length; i++) {
    var char = input.charCodeAt(i)
    if (char < 0x80) {
      bytes.push(char)
    } else if (char < 0x800) {
      bytes.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f))
    } else if (char < 0xd800 || char >= 0xe000) {
      bytes.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f))
    } else {
      // Manejar pares sustitutos UTF-16
      i++
      char = 0x10000 + (((char & 0x3ff) << 10) | (input.charCodeAt(i) & 0x3ff))
      bytes.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f))
    }
  }

  // Constantes iniciales (primeros 32 bits de las partes fraccionarias de las raíces cuadradas de los primeros 8 primos)
  var h0 = 0x6a09e667
  var h1 = 0xbb67ae85
  var h2 = 0x3c6ef372
  var h3 = 0xa54ff53a
  var h4 = 0x510e527f
  var h5 = 0x9b05688c
  var h6 = 0x1f83d9ab
  var h7 = 0x5be0cd19

  // Constantes K (primeros 32 bits de las partes fraccionarias de las raíces cúbicas de los primeros 64 primos)
  var k = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98,
    0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
    0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8,
    0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7,
    0xc67178f2,
  ]

  // Añadir bit '1' y padding
  var bitLength = bytes.length * 8
  bytes.push(0x80)

  // Añadir padding de ceros
  while (bytes.length % 64 !== 56) {
    bytes.push(0)
  }

  // Añadir la longitud del mensaje como un entero de 64 bits big-endian
  for (var j = 7; j >= 0; j--) {
    bytes.push((bitLength >>> (j * 8)) & 0xff)
  }

  // Procesar el mensaje en bloques de 512 bits (64 bytes)
  for (var blockStart = 0; blockStart < bytes.length; blockStart += 64) {
    var w = new Array(64)

    // Copiar el bloque actual en los primeros 16 words w[0..15]
    for (var i = 0; i < 16; i++) {
      w[i] =
        (bytes[blockStart + i * 4] << 24) |
        (bytes[blockStart + i * 4 + 1] << 16) |
        (bytes[blockStart + i * 4 + 2] << 8) |
        bytes[blockStart + i * 4 + 3]
    }

    // Extender los 16 words a 64 words
    for (var i = 16; i < 64; i++) {
      var s0 = rightRotate(w[i - 15], 7) ^ rightRotate(w[i - 15], 18) ^ (w[i - 15] >>> 3)
      var s1 = rightRotate(w[i - 2], 17) ^ rightRotate(w[i - 2], 19) ^ (w[i - 2] >>> 10)
      w[i] = (w[i - 16] + s0 + w[i - 7] + s1) >>> 0
    }

    // Inicializar variables de trabajo
    var a = h0
    var b = h1
    var c = h2
    var d = h3
    var e = h4
    var f = h5
    var g = h6
    var h = h7

    // Comprimir
    for (var i = 0; i < 64; i++) {
      var S1 = rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)
      var ch = (e & f) ^ (~e & g)
      var temp1 = (h + S1 + ch + k[i] + w[i]) >>> 0
      var S0 = rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)
      var maj = (a & b) ^ (a & c) ^ (b & c)
      var temp2 = (S0 + maj) >>> 0

      h = g
      g = f
      f = e
      e = (d + temp1) >>> 0
      d = c
      c = b
      b = a
      a = (temp1 + temp2) >>> 0
    }

    // Añadir el bloque comprimido al hash actual
    h0 = (h0 + a) >>> 0
    h1 = (h1 + b) >>> 0
    h2 = (h2 + c) >>> 0
    h3 = (h3 + d) >>> 0
    h4 = (h4 + e) >>> 0
    h5 = (h5 + f) >>> 0
    h6 = (h6 + g) >>> 0
    h7 = (h7 + h) >>> 0
  }

  // Producir el hash final (big-endian)
  return (
    toHexStringFinal(h0) +
    toHexStringFinal(h1) +
    toHexStringFinal(h2) +
    toHexStringFinal(h3) +
    toHexStringFinal(h4) +
    toHexStringFinal(h5) +
    toHexStringFinal(h6) +
    toHexStringFinal(h7)
  )

  // Función auxiliar para convertir un número a string hexadecimal
  function toHexStringFinal(num) {
    var hex = ""
    for (var i = 0; i < 4; i++) {
      var byte = (num >>> ((3 - i) * 8)) & 0xff
      hex += (byte < 16 ? "0" : "") + byte.toString(16)
    }
    return hex
  }
}
